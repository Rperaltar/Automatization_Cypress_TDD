(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.commands = factory());
}(this, (function () { 'use strict';

  /**
   * format any matched attribute to its proper css selector notation
   * e.g. "-cy:my-selector-name" will be replaced by [data-cy="my-selector-name"]
   *
   * config example:
   * const config = {
   *    name: “”
   *    prefix: “”
   *    separator: “:”
   * }
   *
   * @param  {string}  selectors         the css selectors
   * @param  {object}  config            the options
   * @param  {string}  config.name       the attribute name - default is 'cy'
   * @param  {string}  config.prefix     the attribute prefix - default is 'data-'
   * @param  {string}  config.separator  the separator between the attribute and its value - default is '|'
   * @return {string}                    the formatted selectors
   */
  const formatSelectors = (selectors, {
    name = 'cy',
    prefix = 'data-',
    separator = '|'
  } = {}) => {
    const shortNotation = name + separator;
    const attr = prefix + name;
    if (!selectors.includes(shortNotation)) return selectors;
    selectors.split(' ').forEach(selector => {
      if (selector === '>') return;

      if (selector.startsWith(name)) {
        const value = selector.replace(shortNotation, '');
        selectors = selectors.replace(`${shortNotation}${value}`, `[${attr}=\"${value}\"]`);
      }
    });
    return selectors;
  };

  function commands (...args) {
    const get = (originalFn, selectors, options) => originalFn(formatSelectors(selectors, ...args), options);

    const find = (originalFn, subject, selectors, options) => originalFn(subject, formatSelectors(selectors, ...args), options);

    Cypress.Commands.overwrite('get', get);
    Cypress.Commands.overwrite('find', find);
  }

  return commands;

})));
